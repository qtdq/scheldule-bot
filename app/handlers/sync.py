from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
import asyncio
import logging
from app.config import settings
from app.custom_logging.TelegramLogHandler import send_chat_info_log
from app.extracting_schedule.worker import run_full_sync_for_group, get_schedule_for_group
from app.keyboards.sync import get_sync_keyboard

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text=="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
async def sync_chat(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é".

    –õ–æ–≥–∏–∫–∞:
    1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∞–¥–º–∏–Ω) –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é".
    2. –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í—ã–±–µ—Ä–∏—Ç–µ" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
       –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    message : aiogram.types.Message
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞).
    """
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=get_sync_keyboard())

@router.message(F.text=="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ü–ú–∏–ö-37")
async def sync_schedule(message: Message):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã ***.

    –õ–æ–≥–∏–∫–∞:
    1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤ –ª–æ–≥-—á–∞—Ç, —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å.
    2. –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é `background_sync`, –∫–æ—Ç–æ—Ä–∞—è:
       a. –í—ã–∑—ã–≤–∞–µ—Ç `run_full_sync_for_group("–ü–ú–∏–ö-37")` –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
       b. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
       c. –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ logger.
       d. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –µ—ë.
    3. –ó–∞–ø—É—Å–∫–∞–µ–º `background_sync` —á–µ—Ä–µ–∑ `asyncio.create_task` –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    message : aiogram.types.Message
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞).
    """

    chat_id = message.chat.id
    await message.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ü–ú–∏–ö-37 –Ω–∞—á–∞–ª–∞—Å—å ‚è≥")
    bot = message.bot
    await bot.send_message(settings.TELEGRAM_LOG_CHAT_ID, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ü–ú–∏–ö-37 –Ω–∞—á–∞–ª–∞—Å—å ‚è≥")

    async def background_sync():
        try:
            await run_full_sync_for_group("–ü–ú–∏–ö-37")
            await message.bot.send_message(chat_id, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ")
            logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ü–ú–∏–ö-37 –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            await send_chat_info_log(bot, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ü–ú–∏–ö-37 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚è≥")
        except Exception as e:
            await send_chat_info_log(bot, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)[:1000]}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ü–ú–∏–ö-37: {e}")

    asyncio.create_task(background_sync())

from collections import defaultdict
from aiogram.types import Message

@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ü–ú–∏–ö-37")
async def show_schedule(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã *** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –õ–æ–≥–∏–∫–∞:
    1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä —á–µ—Ä–µ–∑ `get_schedule_for_group(***)`.
    2. –ï—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–ø–æ –ø–æ–ª—é `weekday`) —Å –ø–æ–º–æ—â—å—é defaultdict.
    4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é `format_lesson`:
       - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞
       - –ù–æ–º–µ—Ä –ø–∞—Ä—ã
       - –ê—É–¥–∏—Ç–æ—Ä–∏—è
       - –ú–∞—Ä–∫–µ—Ä –Ω–µ–¥–µ–ª–∏ (`plus`, `minus`, `every`)
    6. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:
       - "plus": –ø–∞—Ä—ã –ø–ª—é—Å-–Ω–µ–¥–µ–ª–∏
       - "minus": –ø–∞—Ä—ã –º–∏–Ω—É—Å-–Ω–µ–¥–µ–ª–∏
       - "all": –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    7. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ `lesson_number` –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã.
    8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    9. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –µ—ë –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    message : aiogram.types.Message
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    try:
        lessons = await get_schedule_for_group("–ü–ú–∏–ö-37")
        if not lessons:
            await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ü–ú–∏–ö-37 –ø—É—Å—Ç–æ–µ.")
            return

        lessons_by_day = defaultdict(list)
        for l in lessons:
            if l.weekday is not None:
                lessons_by_day[l.weekday].append(l)

        week_order = sorted(lessons_by_day.keys())

        weekday_names = {
            1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            2: "–í—Ç–æ—Ä–Ω–∏–∫",
            3: "–°—Ä–µ–¥–∞",
            4: "–ß–µ—Ç–≤–µ—Ä–≥",
            5: "–ü—è—Ç–Ω–∏—Ü–∞",
            6: "–°—É–±–±–æ—Ç–∞",
            7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }

        def format_lesson(l):
            start = l.start_time.strftime("%H:%M") if l.start_time else "??:??"
            end = l.end_time.strftime("%H:%M") if l.end_time else "??:??"
            lesson_num = l.lesson_number if l.lesson_number else "?"
            room = l.rooms if l.rooms else "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

            if l.week_mark == "plus":
                marker = "‚ûï"
            elif l.week_mark == "minus":
                marker = "‚ûñ"
            else:  # every
                marker = "‚ö™"

            return f"  {marker} {lesson_num}: {l.subject} ({room}) ({start}-{end})"

        texts = {"plus": "üìÖ –ü–ª—é—Å–æ–≤–∞—è –Ω–µ–¥–µ–ª—è:\n\n",
                 "minus": "üìÖ –ú–∏–Ω—É—Å–æ–≤–∞—è –Ω–µ–¥–µ–ª—è:\n\n",
                 "all": "üìÖ –í—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"}

        for wd in week_order:
            day_lessons = sorted(lessons_by_day[wd], key=lambda x: x.lesson_number or 0)
            plus_lessons = [l for l in day_lessons if l.week_mark in ("every", "plus")]
            minus_lessons = [l for l in day_lessons if l.week_mark in ("every", "minus")]

            if plus_lessons:
                texts["plus"] += f"üóì {weekday_names[wd]}:\n"
                texts["plus"] += "\n".join(format_lesson(l) for l in plus_lessons) + "\n\n"

            if minus_lessons:
                texts["minus"] += f"üóì {weekday_names[wd]}:\n"
                texts["minus"] += "\n".join(format_lesson(l) for l in minus_lessons) + "\n\n"

            texts["all"] += f"üóì {weekday_names[wd]}:\n"
            texts["all"] += "\n".join(format_lesson(l) for l in day_lessons) + "\n\n"

        await message.answer(texts["plus"])
        await message.answer(texts["minus"])
        await message.answer(texts["all"])

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)[:1000]}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ü–ú–∏–ö-37: {e}")

@router.message(Command("menu"))
async def show_keyboard(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏.

    –õ–æ–≥–∏–∫–∞:
    1. –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é `get_sync_keyboard`.
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    ----------
    message : aiogram.types.Message
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    keyboard = get_sync_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)